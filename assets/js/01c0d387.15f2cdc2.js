"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[963],{2514:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var n=s(4848),a=s(8453);const o={sidebar_position:2},i="toast()",r={id:"toast",title:"toast()",description:"Basic toast",source:"@site/docs/toast.md",sourceDirName:".",slug:"/toast",permalink:"/react-native-reanimated-toasts/toast",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Introduction",permalink:"/react-native-reanimated-toasts/"},next:{title:"Toaster",permalink:"/react-native-reanimated-toasts/Toaster"}},c={},d=[{value:"Basic toast",id:"basic-toast",level:2},{value:"Variations",id:"variations",level:2},{value:"Success Toast",id:"success-toast",level:3},{value:"Error",id:"error",level:3},{value:"Action",id:"action",level:3},{value:"Promises",id:"promises",level:3},{value:"Updating existing toasts",id:"updating-existing-toasts",level:3},{value:"Custom JSX",id:"custom-jsx",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"toast",children:"toast()"})}),"\n",(0,n.jsx)(t.h2,{id:"basic-toast",children:"Basic toast"}),"\n",(0,n.jsx)(t.p,{children:"To display a simple toast message, use the toast() function. You can pass a title and optional settings."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"import { toast } from 'react-native-reanimated-toasts';\n\ntoast('This is a basic toast message.');\n"})}),"\n",(0,n.jsx)(t.p,{children:"Alternatively, you can pass an object as the second argument with additional options, which will override any options provided to the Toaster component if specified."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"import { toast } from 'react-native-reanimated-toasts';\n\ntoast.success('Operation successful!', {\n  description: 'Everything worked as expected.',\n  duration: 3000, // duration in milliseconds\n});\n"})}),"\n",(0,n.jsx)(t.h2,{id:"variations",children:"Variations"}),"\n",(0,n.jsx)(t.h3,{id:"success-toast",children:"Success Toast"}),"\n",(0,n.jsx)(t.p,{children:"The toast.success() function allows you to display a success message. By default, it renders a checkmark icon in front of the message."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"toast.success('My success toast');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"error",children:"Error"}),"\n",(0,n.jsx)(t.p,{children:"Use the toast.error() function to display an error message. By default, it renders a X icon in front of the message."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"toast.error('My error toast');\n"})}),"\n",(0,n.jsx)(t.h3,{id:"action",children:"Action"}),"\n",(0,n.jsxs)(t.p,{children:["Renders a primary button, clicking it will close the toast and run the callback passed via ",(0,n.jsx)(t.code,{children:"onClick"}),". You can prevent the toast from closing by calling ",(0,n.jsx)(t.code,{children:"event.preventDefault()"})," in the ",(0,n.jsx)(t.code,{children:"onClick"})," callback."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"toast('My action toast', {\n  action: {\n    label: 'Action',\n    onClick: () => console.log('Action!'),\n  },\n});\n"})}),"\n",(0,n.jsx)(t.h3,{id:"promises",children:"Promises"}),"\n",(0,n.jsx)(t.p,{children:"The toast.promise function can be used to display a toast message while a promise is in progress, and update the message based on the promise's success or failure."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"const fetchData = async () => {\n  try {\n    const data = await fetch('/api/data');\n    return data;\n  } catch (error) {\n    throw new Error('Failed to fetch data');\n  }\n};\n\nconst toastId = toast.promise(fetchData(), {\n  loading: 'Loading data...',\n  success: (data) => `Data loaded: ${data}`,\n  error: 'Error fetching data',\n});\n"})}),"\n",(0,n.jsx)(t.p,{children:'In this example, the toast.promise function will display a "Loading data..." message while the fetchData promise is in progress, and update the message to the success or error text based on the promise\'s outcome.'}),"\n",(0,n.jsx)(t.h3,{id:"updating-existing-toasts",children:"Updating existing toasts"}),"\n",(0,n.jsx)(t.p,{children:"You can update an existing toast by using the updateToast function, which takes the toast's unique identifier and the new toast options:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"const toastId = toast('Hello');\n\nupdateToast(toastId, {\n  description: 'Updated error message',\n  duration: 5000,\n});\n"})}),"\n",(0,n.jsx)(t.h3,{id:"custom-jsx",children:"Custom JSX"}),"\n",(0,n.jsx)(t.p,{children:"You can pass custom JSX elements to the toast function to render more complex content:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:'toast.custom(\n  <View>\n    <Text>Custom toast content</Text>\n    <Button title="Close" onPress={() => toast.dismiss()} />\n  </View>\n);\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>r});var n=s(6540);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);